from aiogram import Router, types, F
from app.db import get_session
from app.models import User, Client
from sqlmodel import select
from aiogram.filters import Command
from app.ai import generate_reply, generate_offer

router = Router()

@router.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å —É—Å–ª—É–≥–∏.\n\n"
        "üëâ –ï—Å–ª–∏ —Ç—ã –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /become_a_lead\n"
        "üí¨ –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–¥—É–∫—Ç–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )


@router.message(Command("become_a_lead"))
async def register_user(message: types.Message):
    session = get_session()
    tg_id = message.from_user.id
    username = message.from_user.username
    user = session.exec(select(User).where(User.telegram_id == tg_id)).first()
    if not user:
        user = User(telegram_id=tg_id, username=username)
        session.add(user)
        session.commit()
        await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ª–∏–¥–µ—Ä.")
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

@router.message(Command("add_client"))
async def add_client(message: types.Message):
    session = get_session()
    tg_id = message.from_user.id
    user = session.exec(select(User).where(User.telegram_id == tg_id)).first()
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_client @username")
        return
    client_username = args[1].lstrip("@")
    client = Client(telegram_username=client_username, user_id=user.id)
    session.add(client)
    session.commit()
    await message.answer(f"–ö–ª–∏–µ–Ω—Ç @{client_username} –¥–æ–±–∞–≤–ª–µ–Ω.")

@router.message(Command("make_offer"))
async def make_offer(message: types.Message):
    session = get_session()
    tg_id = message.from_user.id
    user = session.exec(select(User).where(User.telegram_id == tg_id)).first()

    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return

    services_description = message.text.removeprefix("/make_offer").strip()
    if not services_description:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–∏—Ö —É—Å–ª—É–≥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n–ü—Ä–∏–º–µ—Ä: /make_offer –£—Å–ª—É–≥–∞ –ø–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é –±–∏–∑–Ω–µ—Å–∞ –∑–∞ 7 –¥–Ω–µ–π")
        return
    
    # offer = await generate_offer(services_description) –£–¢–ü –æ—Ç –≥–ø—Ç
    offer = services_description

    user.offer = offer
    session.add(user)
    session.commit()
    await message.answer("–£–¢–ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

@router.message()
async def handle_client_message(message: types.Message):

    print("Got message:", message.text)

    session = get_session()
    sender_username = message.from_user.username

    client = session.exec(select(Client).where(Client.telegram_username==sender_username)).first()
    if not client:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –∫–∞–∫ –µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")
        return
    
    user = session.get(User, client.user_id)
    if not user:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –∫–∞–∫ –µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")
        return
    
    if not client.offer_sent:
        if user.offer:
            await message.answer(user.offer)
            client.offer_sent=True
        
        else:
            await message.answer("–í–∞—à –ø—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª –£–¢–ü.")
        
        session.add(client)
        session.commit()
        return
    
    else:
        gpt_reply = await generate_reply(
            client_message=message.text,
            leader_username=user.username,
            offer=user.offer
        )
        await message.answer(gpt_reply)

